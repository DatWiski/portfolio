---
import ProjectCard from './ProjectCard.astro';
import ProjectGrid from './ProjectGrid.astro';
import { projects } from '../data/projects';
---

<section class="hero" id="hero">
	<div class="hero-content">
		<div class="hero-intro">
			<div class="hero-text">
				<h1>Hi, I'm <span class="highlight">Marcel</span></h1>
				<h2 class="subtitle">Full Stack Developer</h2>
				<p class="hero-description">
					Passionate about building modern web applications with clean, efficient code.
					Experienced in Spring Boot and React.
				</p>
			</div>
		</div>

		<div class="hero-projects-section">
			<div class="hero-projects">
				<h3>Featured Projects</h3>
				<div class="shiba-container">
					<img src="/shiba.svg" alt="Shiba Inu" class="shiba-img" />
				</div>
				<div class="project-container">
					{projects.map((project, index) => (
						<ProjectCard {...project} index={index} />
					))}
				</div>
			</div>
			<div class="project-grid-section">
				<ProjectGrid />
			</div>
		</div>
	</div>
</section>

<style>
  .hero {
    min-height:80vh;
    display: flex;
    align-items: center;
    margin-bottom: var(--spacing-xl);
  }

  .hero-content {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-xl);
    width: 100%;
  }

  .hero-intro {
    text-align: center;
    margin-bottom: var(--spacing-lg);
  }

  .hero-text h1 {
    font-size: 2.8rem;
    margin-bottom: var(--spacing-sm);
    color: var(--text-color);
  }

  .highlight {
    color: var(--primary-color);
  }

  .subtitle {
    font-size: 1.4rem;
    color: var(--secondary-color);
    margin-bottom: var(--spacing-md);
    font-weight: 500;
  }

  .hero-description {
    font-size: 1rem;
    line-height: 1.6;
    margin-bottom: var(--spacing-lg);
    color: var(--text-color);
  }

  .hero-actions {
    display: flex;
    gap: var(--spacing-lg);
  }

  .btn-primary, .btn-secondary {
    padding: 14px 28px;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 600;
    transition: all 0.3s ease;
    display: inline-block;
  }

  .btn-primary {
    background: var(--primary-color);
    color: var(--white);
  }

  .btn-primary:hover {
    background: var(--primary-hover);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px var(--primary-alpha);
  }

  .btn-secondary {
    background: transparent;
    color: var(--primary-color);
    border: 2px solid var(--primary-color);
  }

  .btn-secondary:hover {
    background: var(--primary-color);
    color: var(--white);
    transform: translateY(-2px);
  }

  /* Hero Projects Section */
  .hero-projects-section {
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
    max-width: 1400px;
    margin: 0 auto;
  }

  .hero-projects {
    width: 100%;
  }

  .hero-projects h3 {
    color: var(--primary-color);
    font-size: 2rem;
    margin-bottom: var(--spacing-lg);
    text-align: center;
    font-weight: 600;
  }

  .project-container {
    max-width: 100%;
    margin: 0;
    height: 500px;
    position: relative;
    overflow: hidden;
    border-radius: 16px;
    box-shadow: 0 8px 32px rgba(0,0,0,0.12);
  }

  .project-grid-section {
    width: 100%;
    display: flex;
    flex-direction: column;
  }

  .shiba-container {
    display: flex;
    justify-content: center;
    margin-bottom: var(--spacing-md);
    position: relative;
  }

  .shiba-img {
    width: 80px;
    height: 80px;
    opacity: 1;
    transition: all 0.3s ease;
    position: absolute;
    left: 50px;
    top: -32px;
    transform: translateX(-50%);
    z-index: 20;
  }

  @media (max-width: 1024px) {
    .project-container {
      height: 450px;
    }
  }

  @media (max-width: 768px) {
    .hero {
      min-height: auto;
      padding: var(--spacing-lg) 0;
    }

    .hero-text h1 {
      font-size: 2.5rem;
    }

    .subtitle {
      font-size: 1.4rem;
    }

    .hero-actions {
      justify-content: center;
    }

    .project-container {
      height: 350px;
    }

    .hero-projects h3 {
      font-size: 1.4rem;
    }
  }

  @media (max-width: 480px) {
    .hero-text h1 {
      font-size: 2rem;
    }

    .hero-actions {
      flex-direction: column;
      gap: var(--spacing-md);
    }

    .btn-primary, .btn-secondary {
      text-align: center;
    }

    .project-container {
      height: 300px;
    }

    .hero-projects h3 {
      font-size: 1.5rem;
    }
  }
</style>

<script>
  setTimeout(() => {
    const cards = document.querySelectorAll('.project-card') as NodeListOf<HTMLElement>;
    const gridItems = document.querySelectorAll('.grid-item') as NodeListOf<HTMLElement>;

    if (cards.length === 0) return;

    let currentIndex = 0;
    let autoRotateInterval: NodeJS.Timeout;
    let isHovering = false;

    function showCard(index: number) {
      cards.forEach((card, i) => {
        if (i === index) {
          card.style.opacity = '1';
        } else {
          card.style.opacity = '0';
        }
      });

      // Update grid item active state
      gridItems.forEach((item, i) => {
        if (i === index) {
          item.classList.add('active');
        } else {
          item.classList.remove('active');
        }
      });
    }

    function goToNext() {
      currentIndex = (currentIndex + 1) % cards.length;
      showCard(currentIndex);
    }

    function goToPrev() {
      currentIndex = (currentIndex - 1 + cards.length) % cards.length;
      showCard(currentIndex);
    }

    function startAutoRotate() {
      clearInterval(autoRotateInterval);
      if (!isHovering) {
        autoRotateInterval = setInterval(goToNext, 4000);
      }
    }

    function stopAutoRotate() {
      clearInterval(autoRotateInterval);
    }


    // Grid item click handlers
    gridItems.forEach((item, index) => {
      item.addEventListener('click', () => {
        stopAutoRotate();
        currentIndex = index;
        showCard(currentIndex);
        // Only restart if not currently hovering
        if (!isHovering) {
          startAutoRotate();
        }
      });
    });

    // Simple boolean hover detection
    const projectSection = document.querySelector('.hero-projects-section') as HTMLElement;

    if (projectSection) {
      projectSection.addEventListener('mouseenter', () => {
        isHovering = true;
        stopAutoRotate();
      });
      projectSection.addEventListener('mouseleave', () => {
        isHovering = false;
        startAutoRotate();
      });
    }

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        stopAutoRotate();
        goToPrev();
        startAutoRotate();
      } else if (e.key === 'ArrowRight') {
        stopAutoRotate();
        goToNext();
        startAutoRotate();
      }
    });

    // Initialize
    showCard(0);
    startAutoRotate();
  }, 500);
</script>